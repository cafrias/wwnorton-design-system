////
/// The main entry point for using the design system styles (the public API).
/// This does not contain any declarations and will not compile to CSS unless
/// its mixins are @included.
/// @group Main
////

@forward './system';
@use 'sass:map';
@use './system' as nds;

/// All foundational design tokens set as CSS custom properties on the `:root`.
/// @require {mixin} color-tokens
/// @require {mixin} motion-tokens
/// @require {mixin} spacing-tokens
/// @require {mixin} typography-tokens
/// @require {mixin} miscellaneous-tokens
@mixin root {
	// set each foundation on a separate :root declaration for visible grouping
	/* stylelint-disable no-duplicate-selectors */
	:root {
		@include nds.color-tokens;
	}

	:root {
		@include nds.elevation-tokens;
	}

	:root {
		@include nds.motion-tokens;
	}

	:root {
		@include nds.spacing-tokens;
	}

	:root {
		@include nds.typography-tokens;
	}

	:root {
		@include nds.miscellaneous-tokens;
	}

	// Set color scheme selectors if the dark scheme is enabled.
	@if nds.$enable-dark-scheme {
		[data-color-scheme='light'] {
			@include nds.light-scheme;
		}

		[data-color-scheme='dark'] {
			@include nds.dark-scheme;
		}
	}
}

/// All foundational design tokens set as CSS custom properties  on the `:root`.
/// @deprecated Use the `root` mixin to set your `:root` declaration, or set
/// tokens on your own selector with the `design-tokens` mixin.
@mixin tokens {
	@include root;
}

/// All foundational design tokens as CSS custom properties. Use when you need
/// access to all CSS custom properties outside of the `:root` context.
/// @require {mixin} color-tokens
/// @require {mixin} motion-tokens
/// @require {mixin} spacing-tokens
/// @require {mixin} typography-tokens
/// @require {mixin} miscellaneous-tokens
/// @example shadowDOM - Usage in shadow DOM styling
///   @use '@wwnds/core' as nds;
///   :host {
///     @include nds.design-tokens;
///   }
@mixin design-tokens {
	@include nds.color-tokens;
	@include nds.elevation-tokens;
	@include nds.motion-tokens;
	@include nds.spacing-tokens;
	@include nds.typography-tokens;
	@include nds.miscellaneous-tokens;
}

/// Declarations for every component.
@mixin components {
	@include nds.badge-style;
	@include nds.button-style;
	@include nds.callout-style;
	@include nds.checkbox-style;
	@include nds.disclosure-style;
	@include nds.dropdown-style;
	@include nds.field-style;
	@include nds.icon-style;
	@include nds.link-style;
	@include nds.listbox-style;
	@include nds.modal-style;
	@include nds.popover-style;
	@include nds.popper-style;
	@include nds.progressbar-style;
	@include nds.radio-style;
	@include nds.spinner-style;
	@include nds.stepindicator-style;
	@include nds.switch-style;
	@include nds.tab-style;
	@include nds.tab-list-style;
	@include nds.tab-scroll-button-style;
	@include nds.tag-style;
	@include nds.textfield-style;
	@include nds.tooltip-style;
}

/// Helper declarations that set a composed style uncoupled from any component.
@mixin helpers {
	@if nds.$enable-helpers {
		@include nds.a11y-helpers;
		@include nds.motion-helpers;
	}
}

/// Utility declarations that set one property per class.
@mixin utilities {
	@if map.get(nds.$utilities, 'color') {
		@include nds.color-utilities;
	}

	@if map.get(nds.$utilities, 'spacing') {
		@include nds.spacing-utilities;
	}
}

/// The complete design system set in a single global stylesheet.
@mixin complete {
	@include root;
	@include nds.reset;
	@include components;
	@include helpers;
	@include utilities;
}
